{"version":3,"sources":["components/Navbar.js","components/LineCard.js","assets/tube_map.png","components/TubeMap.js","components/Weather.js","components/NotFound.js","components/Homepage.js","containers/App.js","serviceWorker.js","index.js"],"names":["NavBar","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Items","this","props","name","colour","status","reason","style","Component","TubeMap","src","map_of_tube","alt","Weather","bearings","wind_degree","convert_temp","temp","temp_c","Math","round","toFixed","convert_feelslike","feelslike","feelslike_c","wind_mph","condition","condition_desc","direction","temp_final","feels_like_final","title","NotFound","Homepage","App","getAllData","Axios","get","then","res","setState","lineData","data","catch","err","console","log","getWeather","process","weather","main","wind","state","lineColour","bakerloo","central","circle","district","jubilee","metropolitan","northern","piccadilly","victoria","dlr","tram","exact","path","map","line","backgroundColor","lineStatuses","speed","deg","feels_like","description","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.754b44ef.chunk.js","sourcesContent":["import React from 'react';\nimport '../styling/Navbar.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nfunction NavBar() {\n    return (\n        <div>\n            <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n                <Navbar.Brand href=\"\">London Travel</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link className=\"link\" href=\"/\" id=\"home_link\">Home</Nav.Link>\n                        <Nav.Link className=\"link\" href=\"/linestatus\" id=\"line_link\">Lines</Nav.Link>\n                        <Nav.Link className=\"link\" href=\"/map\" id=\"map_link\">Tube Map</Nav.Link>\n                        <Nav.Link className=\"link\" href=\"/weather\" id=\"weather_link\">Weather</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { Component } from 'react'\nimport '../styling/LineCard.css'\n\n\nexport default class Items extends Component {\n\n    render() {\n        let { name, colour, status, reason } = this.props;\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\" style={colour}>\n                    <h3>{name}</h3>\n                </div>\n                <div className=\"card-body\">\n                    <h5>{status}</h5>\n                    {reason && <p>{reason}</p>}\n                </div> \n                <div className=\"card-footer\"><br/></div>\n            </div>\n        )\n    }\n}\n","export default __webpack_public_path__ + \"static/media/tube_map.7beb0d5b.png\";","import React from 'react';\nimport map_of_tube from '../assets/tube_map.png';\nimport '../styling/TubeMap.css';\n\nexport default function TubeMap() {\n    return (\n        <div>\n            <img src={map_of_tube} alt=\"tube map\"/>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport '../styling/Weather.css';\n\nexport default class Weather extends Component {\n\n    bearings = (wind_degree) => {\n        if(wind_degree > 0 && wind_degree < 26) {\n            return \"Northerly\"\n        } else if(wind_degree > 25 && wind_degree < 65) {\n            return \"North Easterly\"\n        } else if(wind_degree > 65 && wind_degree < 115) {\n            return \"Easterly\"\n        } else if(wind_degree > 115 && wind_degree < 155) {\n            return \"South Easterly\"\n        } else if(wind_degree > 155 && wind_degree < 205) {\n            return \"Southerly\"\n        } else if(wind_degree > 205 && wind_degree < 245) {\n            return \"South Westerly\"\n        } else if(wind_degree > 245 && wind_degree < 295) {\n            return \"Westerly\"\n        } else if(wind_degree > 295 && wind_degree < 335) {\n            return \"North Westerly\"\n        } else if(wind_degree > 335 && wind_degree < 0) {\n            return \"Norhterly\"\n        }\n    }\n\n    convert_temp = (temp) => {\n        let temp_c = (temp-273.15)\n        let temp_final = (Math.round(temp_c * 100) / 100).toFixed(2);\n        return temp_final\n    }\n    \n    convert_feelslike = (feelslike) => {\n        let feelslike_c = (feelslike-273.15)\n        let feels_like_final = (Math.round(feelslike_c * 100) / 100).toFixed(2);\n        return feels_like_final\n    }\n\n    componentDidMount() {\n        this.bearings()\n        this.convert_temp()\n        this.convert_feelslike()\n    }\n\n    render() {\n        let { temp, feelslike, wind_mph, wind_degree, condition, condition_desc } = this.props;\n        let direction = this.bearings(wind_degree)\n        let temp_final = this.convert_temp(temp)\n        let feels_like_final = this.convert_temp(feelslike)\n        return (\n            <div className=\"container\">\n                <div className=\"weather-header\">\n                    <h2>Weather</h2>\n                </div>\n                <div className=\"weather-body\">\n                    <h3>{condition}</h3>\n                    <h5>Condition: {condition_desc}</h5>\n                    <h5>Temp: {temp_final} C</h5>\n                    <h5>Feels like: {feels_like_final} C</h5>\n                    <h5>Wind: {wind_mph}mph</h5>\n                    <h5>Wind direction: {direction}</h5>\n                </div> \n                <div className=\"weather-footer\">\n                    <p>Powered by <a href=\"https://openweathermap.org/\" title=\"Free Weather API\">OpenWeatherMap.org</a></p>\n                </div>\n            </div> \n        )\n    }\n}\n\n","import React from 'react'\n\nexport default function NotFound() {\n    return (\n        <div>\n            <h2>Page not found: please use the link above to return home</h2>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Homepage() {\n    return (\n        <div>\n            <h4>Welcome to the London Travel App</h4>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Axios from 'axios';\nimport { BrowserRouter as Router , Switch, Route } from 'react-router-dom';\nimport Navbar from '../components/Navbar';\nimport LineCard from '../components/LineCard';\nimport TubeMap from '../components/TubeMap';\nimport Weather from '../components/Weather';\nimport NotFound from '../components/NotFound';\nimport Homepage from '../components/Homepage';\nimport '../styling/App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      main: {},\n      condition: {},\n      wind: {},\n      lineData: [],\n      lineColour: {\n        bakerloo: '#894E24',\n        central: '#DC251F',\n        circle: '#F8CE00',\n        district: '#197229',\n        \"hammersmith-city\": \"#D799AF\",\n        jubilee: \"#6A7278\",\n        metropolitan: \"#751056\",\n        northern: \"#000000\",\n        piccadilly: \"#2119A8\",\n        victoria: \"#3EA0E2\",\n        \"waterloo-city\": \"#76D0BD\",\n        \"london-overground\": \"#E86A11\",\n        dlr: '#38AFAD',\n        tram: \"#66CC01\",\n      }\n    }\n  }\n\n  getAllData = () => {\n    Axios.get(\"https://api.tfl.gov.uk/Line/Mode/tube%2Cdlr%2Coverground%2Ctram/Status\")\n    .then(res => {\n      this.setState({\n        lineData: res.data,\n      })\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n\n  getWeather = () => {\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n    Axios.get(`https://api.openweathermap.org/data/2.5/weather?q=london&appid=${API_KEY}`)\n    .then(res => {\n      this.setState({\n        condition: res.data.weather[0],\n        main: res.data.main,\n        wind: res.data.wind\n      })\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n\n  componentDidMount() {\n    this.getAllData()\n    this.getWeather()\n  }\n  \n  render() {\n    let { lineData, lineColour, main, wind, condition } = this.state;\n    return (\n      <Router>\n        <Navbar/>\n        <Switch>\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n          <Route exact path=\"/linestatus\">\n            <div className=\"flex-container\">\n            {lineData.map(line => {\n              let colour = { backgroundColor: lineColour[line.id] }\n              return (<LineCard\n                name={line.name}\n                colour={colour}\n                status={line.lineStatuses[0][\"statusSeverityDescription\"]}\n                reason={line.lineStatuses[0][\"reason\"]} />)})}\n                </div>\n          </Route>\n          <Route exact path=\"/map\">\n            <TubeMap />\n          </Route>\n          <Route exact path=\"/weather\">\n            <Weather \n            wind_mph={wind.speed}\n            wind_degree={wind.deg}\n            temp={main.temp}\n            feelslike={main.feels_like}\n            condition={condition.main}\n            condition_desc={condition.description}\n            />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/styling/index.css';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}